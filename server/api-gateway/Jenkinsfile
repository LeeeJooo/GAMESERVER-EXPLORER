pipeline {
    environment {
        repository = "vlwli99/api-gateway"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_token')
        dockerImage = ''
    }

    agent any

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
            }
        }
        stage('Build Project') {
            steps {
                dir("./server/api-gateway") {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build"
                }
                dir("./server/user") {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build"
                }
            }
        }
        stage('Build Image'){
            when {
                changeset "**/server/api-gateway/**"
            }
            steps{
                script {
                    dir("./server/api-gateway") {
                        sh 'docker-compose -f docker-compose.yml build'
                    }
                }
            }
        }

        stage('DockerHub Login'){
            when {
                changeset "**/server/api-gateway/**"
            }
            steps{
                script{
                    sh "echo \${DOCKERHUB_PASSWORD} | docker login -u \${DOCKERHUB_ID} --password-stdin"
                }
            }
        }

        stage('Push Image'){
            when {
                changeset "**/server/api-gateway/**"
            }
            steps{
                script{
                    dir("./server/api-gateway") {
                        sh 'docker-compose -f docker-compose.yml push'
                    }
                }
            }
        }

        stage('Clean Image'){
            when {
                changeset "**/server/api-gateway/**"
            }
            steps{
                script{
                    def imageIds = sh(script: "docker images -q vlwli99/api-gateway", returnStdout: true).trim().split()
                    imageIds.each { id ->
                        if (id) {
                            sh "docker rmi ${id} || true"
                        }
                    }
                    sh 'docker image prune -f --filter until=1h'
                }
            }
        }

        stage('Pull') {
            when {
                changeset "**/server/api-gateway/**"
            }
            steps {
                script {
                    dir("./server/api-gateway") {
                        sh "docker-compose pull"
                    }
                }
            }
        }

        stage("Down") {
            when {
                changeset "**/server/api-gateway/**"
            }
            steps {
                script {
                    def containers = sh(script: "docker ps -q --filter ancestor=api-gateway", returnStdout: true).trim()
                    if (containers) {
                        dir("./server/api-gateway") {
                            sh "docker-compose down"
                        }
                    }
                    sh "docker system prune -af --volumes"
                }
            }
        }

        stage("Up"){
            when {
                changeset "**/server/api-gateway/**"
            }
            steps{
                script{
                    dir("./server/api-gateway") {
                        sh "docker-compose up -d --build"
                    }
                }
            }
        }

    }
}
