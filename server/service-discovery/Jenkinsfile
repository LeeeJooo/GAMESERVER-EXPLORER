pipeline {
    environment {
        repository = "vlwli99/service-discovery"
        dockerImage = ''
    }

    agent any

    stages {
        stage('Clone Repository') {
            when {
                changeset "**/server/service-discovery/**"
            }
            steps {
                checkout scm
            }
        }
        stage('Build Project') {
            when {
                changeset "**/server/service-discovery/**"
            }
            steps {
                dir("./server/service-discovery") {
                    sh "chmod +x ./gradlew"
                    sh "./gradlew clean build"
                }
            }
        }
        stage('Build Image'){
            when {
                changeset "**/server/service-discovery/**"
            }
            steps{
                script{
                    dockerImage = docker.build("${repository}:service-discovery-${BUILD_NUMBER}", "-f server/service-discovery/Dockerfile ./server/service-discovery")
                }
            }
        }

        stage('DockerHub Login'){
            when {
                changeset "**/server/service-discovery/**"
            }
            steps{
                script{
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_token', usernameVariable: 'DOCKERHUB_ID', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        sh """
                            set +x
                            echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_ID --password-stdin
                            set -x
                        """
                    }
                }
            }
        }

        stage('Push Image'){
            when {
                changeset "**/server/service-discovery/**"
            }
            steps{
                script{
                    if (dockerImage) {
                        sh "docker push \${repository}:service-discovery-\${BUILD_NUMBER}"
                    } else {
                        echo "No docker image to push."
                    }
                }
            }
        }

        stage('Clean Image'){
            when {
                changeset "**/server/service-discovery/**"
            }
            steps{
                script{
                    def imageExists = sh(script: "docker images -q \${repository}:service-discovery-\${BUILD_NUMBER}", returnStdout: true).trim()
                    if (imageExists) {
                        sh "docker rmi \${repository}:service-discovery-\${BUILD_NUMBER}"
                    } else {
                        echo "No image found to remove."
                    }
                }
            }
        }

        stage("Garbage Collect") {
            when {
                changeset "**/server/service-discovery/**"
            }
            steps {
                script {
                    def containers = sh(script: "docker ps -q --filter ancestor=\${repository}:service-discovery-\${BUILD_NUMBER}", returnStdout: true).trim()
                    if (containers) {
                        sh "docker kill \${containers}"
                    }
                    sh "docker system prune -af --volumes"
                }
            }
        }


        stage("Deploy"){
            when {
                changeset "**/server/service-discovery/**"
            }
            steps{
                script{
                    def containerExists = sh(script: "docker ps -aq --filter 'name=service-discovery'", returnStdout: true).trim()
                    if (containerExists) {
                        sh "docker rm -f service-discovery"
                    }
                    sh "docker run -d -p 8761:8761 --name service-discovery \${repository}:service-discovery-\${BUILD_NUMBER}"
                }
            }
        }
    }
    post {
        success {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'good',
                message: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/sdq6nmebninyff7pdd9nszymko',
                channel: 'C201_Jenkins'
                )
            }
        }
        failure {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                mattermostSend (color: 'danger',
                message: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                endpoint: 'https://meeting.ssafy.com/hooks/sdq6nmebninyff7pdd9nszymko',
                channel: 'C201_Jenkins'
                )
            }
        }
    }
}
